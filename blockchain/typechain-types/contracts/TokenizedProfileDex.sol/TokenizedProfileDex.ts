/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenizedProfileDexInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH"
      | "swapETHForTokens"
      | "swapRouter"
      | "swapTokensForETH"
      | "swapTokensForTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SwapETHForTokens"
      | "SwapTokensForETH"
      | "SwapTokensForTokens"
  ): EventFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapETHForTokens",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForETH",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForTokens",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForTokens",
    data: BytesLike
  ): Result;
}

export namespace SwapETHForTokensEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapTokensForETHEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenIn: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenIn: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenIn: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapTokensForTokensEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenizedProfileDex extends BaseContract {
  connect(runner?: ContractRunner | null): TokenizedProfileDex;
  waitForDeployment(): Promise<this>;

  interface: TokenizedProfileDexInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH: TypedContractMethod<[], [string], "view">;

  swapETHForTokens: TypedContractMethod<
    [tokenOut: AddressLike, amountOutMin: BigNumberish, fee: BigNumberish],
    [bigint],
    "payable"
  >;

  swapRouter: TypedContractMethod<[], [string], "view">;

  swapTokensForETH: TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      fee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapTokensForTokens: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      fee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapETHForTokens"
  ): TypedContractMethod<
    [tokenOut: AddressLike, amountOutMin: BigNumberish, fee: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapTokensForETH"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      fee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForTokens"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      fee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "SwapETHForTokens"
  ): TypedContractEvent<
    SwapETHForTokensEvent.InputTuple,
    SwapETHForTokensEvent.OutputTuple,
    SwapETHForTokensEvent.OutputObject
  >;
  getEvent(
    key: "SwapTokensForETH"
  ): TypedContractEvent<
    SwapTokensForETHEvent.InputTuple,
    SwapTokensForETHEvent.OutputTuple,
    SwapTokensForETHEvent.OutputObject
  >;
  getEvent(
    key: "SwapTokensForTokens"
  ): TypedContractEvent<
    SwapTokensForTokensEvent.InputTuple,
    SwapTokensForTokensEvent.OutputTuple,
    SwapTokensForTokensEvent.OutputObject
  >;

  filters: {
    "SwapETHForTokens(address,address,uint256,uint256)": TypedContractEvent<
      SwapETHForTokensEvent.InputTuple,
      SwapETHForTokensEvent.OutputTuple,
      SwapETHForTokensEvent.OutputObject
    >;
    SwapETHForTokens: TypedContractEvent<
      SwapETHForTokensEvent.InputTuple,
      SwapETHForTokensEvent.OutputTuple,
      SwapETHForTokensEvent.OutputObject
    >;

    "SwapTokensForETH(address,address,uint256,uint256)": TypedContractEvent<
      SwapTokensForETHEvent.InputTuple,
      SwapTokensForETHEvent.OutputTuple,
      SwapTokensForETHEvent.OutputObject
    >;
    SwapTokensForETH: TypedContractEvent<
      SwapTokensForETHEvent.InputTuple,
      SwapTokensForETHEvent.OutputTuple,
      SwapTokensForETHEvent.OutputObject
    >;

    "SwapTokensForTokens(address,address,address,uint256,uint256)": TypedContractEvent<
      SwapTokensForTokensEvent.InputTuple,
      SwapTokensForTokensEvent.OutputTuple,
      SwapTokensForTokensEvent.OutputObject
    >;
    SwapTokensForTokens: TypedContractEvent<
      SwapTokensForTokensEvent.InputTuple,
      SwapTokensForTokensEvent.OutputTuple,
      SwapTokensForTokensEvent.OutputObject
    >;
  };
}
