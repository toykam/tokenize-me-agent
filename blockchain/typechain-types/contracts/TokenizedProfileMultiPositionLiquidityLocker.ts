/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenizedProfileMultiPositionLiquidityLockerInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "PROTOCOL_ADDRESS"
      | "allTokenIds"
      | "collectAllFees"
      | "collectFees"
      | "collectSelectedFees"
      | "defaultLockingPeriod"
      | "defaultLpFeesCut"
      | "feeCollector"
      | "getAllPositions"
      | "getPositionsForUser"
      | "initializePosition"
      | "isPositionOwner"
      | "onERC721Received"
      | "owner"
      | "positionManager"
      | "positions"
      | "protocolCollectAllFees"
      | "protocolCollectFeesBatch"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateDefaultLockingPeriod"
      | "updateDefaultLpFeesCut"
      | "updateFeeCollector"
      | "userTokenIds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchFeesCollected"
      | "FeesCollected"
      | "OwnershipTransferred"
      | "PositionLocked"
      | "PositionWithdrawn"
      | "ProtocolBatchFeesCollected"
      | "Received"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PROTOCOL_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allTokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAllFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectSelectedFees",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLockingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLpFeesCut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePosition",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolCollectAllFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolCollectFeesBatch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultLockingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultLpFeesCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "PROTOCOL_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectSelectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLpFeesCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolCollectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolCollectFeesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultLpFeesCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BatchFeesCollectedEvent {
  export type InputTuple = [
    owner: AddressLike,
    count: BigNumberish,
    totalAmount0: BigNumberish,
    totalAmount1: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    count: bigint,
    totalAmount0: bigint,
    totalAmount1: bigint
  ];
  export interface OutputObject {
    owner: string;
    count: bigint;
    totalAmount0: bigint;
    totalAmount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    token0: AddressLike,
    token1: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    token0: string,
    token1: string,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    token0: string;
    token1: string;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionLockedEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    unlockTime: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionWithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [owner: string, tokenId: bigint, recipient: string];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolBatchFeesCollectedEvent {
  export type InputTuple = [
    count: BigNumberish,
    totalAmount0: BigNumberish,
    totalAmount1: BigNumberish
  ];
  export type OutputTuple = [
    count: bigint,
    totalAmount0: bigint,
    totalAmount1: bigint
  ];
  export interface OutputObject {
    count: bigint;
    totalAmount0: bigint;
    totalAmount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [from: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [from: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenizedProfileMultiPositionLiquidityLocker
  extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): TokenizedProfileMultiPositionLiquidityLocker;
  waitForDeployment(): Promise<this>;

  interface: TokenizedProfileMultiPositionLiquidityLockerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PROTOCOL_ADDRESS: TypedContractMethod<[], [string], "view">;

  allTokenIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  collectAllFees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        positionsCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;

  collectFees: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  collectSelectedFees: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [
      [bigint, bigint, bigint] & {
        processedCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;

  defaultLockingPeriod: TypedContractMethod<[], [bigint], "view">;

  defaultLpFeesCut: TypedContractMethod<[], [bigint], "view">;

  feeCollector: TypedContractMethod<[], [string], "view">;

  getAllPositions: TypedContractMethod<[], [bigint[]], "view">;

  getPositionsForUser: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  initializePosition: TypedContractMethod<
    [
      tokenId: BigNumberish,
      owner: AddressLike,
      unlockTime: BigNumberish,
      lpFeesCut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isPositionOwner: TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, from: AddressLike, id: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  positions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        owner: string;
        unlockTime: bigint;
        lpFeesCut: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  protocolCollectAllFees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        processedCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;

  protocolCollectFeesBatch: TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        processedCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDefaultLockingPeriod: TypedContractMethod<
    [_defaultLockingPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDefaultLpFeesCut: TypedContractMethod<
    [_defaultLpFeesCut: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFeeCollector: TypedContractMethod<
    [_feeCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  userTokenIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [tokenId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PROTOCOL_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allTokenIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectAllFees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        positionsCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectSelectedFees"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [
      [bigint, bigint, bigint] & {
        processedCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultLockingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultLpFeesCut"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllPositions"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPositionsForUser"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initializePosition"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      owner: AddressLike,
      unlockTime: BigNumberish,
      lpFeesCut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPositionOwner"
  ): TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, from: AddressLike, id: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        owner: string;
        unlockTime: bigint;
        lpFeesCut: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolCollectAllFees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        processedCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolCollectFeesBatch"
  ): TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        processedCount: bigint;
        totalAmount0: bigint;
        totalAmount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDefaultLockingPeriod"
  ): TypedContractMethod<
    [_defaultLockingPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDefaultLpFeesCut"
  ): TypedContractMethod<
    [_defaultLpFeesCut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFeeCollector"
  ): TypedContractMethod<[_feeCollector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTokenIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [tokenId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchFeesCollected"
  ): TypedContractEvent<
    BatchFeesCollectedEvent.InputTuple,
    BatchFeesCollectedEvent.OutputTuple,
    BatchFeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PositionLocked"
  ): TypedContractEvent<
    PositionLockedEvent.InputTuple,
    PositionLockedEvent.OutputTuple,
    PositionLockedEvent.OutputObject
  >;
  getEvent(
    key: "PositionWithdrawn"
  ): TypedContractEvent<
    PositionWithdrawnEvent.InputTuple,
    PositionWithdrawnEvent.OutputTuple,
    PositionWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolBatchFeesCollected"
  ): TypedContractEvent<
    ProtocolBatchFeesCollectedEvent.InputTuple,
    ProtocolBatchFeesCollectedEvent.OutputTuple,
    ProtocolBatchFeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;

  filters: {
    "BatchFeesCollected(address,uint256,uint256,uint256)": TypedContractEvent<
      BatchFeesCollectedEvent.InputTuple,
      BatchFeesCollectedEvent.OutputTuple,
      BatchFeesCollectedEvent.OutputObject
    >;
    BatchFeesCollected: TypedContractEvent<
      BatchFeesCollectedEvent.InputTuple,
      BatchFeesCollectedEvent.OutputTuple,
      BatchFeesCollectedEvent.OutputObject
    >;

    "FeesCollected(uint256,address,address,uint256,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PositionLocked(address,uint256,uint64)": TypedContractEvent<
      PositionLockedEvent.InputTuple,
      PositionLockedEvent.OutputTuple,
      PositionLockedEvent.OutputObject
    >;
    PositionLocked: TypedContractEvent<
      PositionLockedEvent.InputTuple,
      PositionLockedEvent.OutputTuple,
      PositionLockedEvent.OutputObject
    >;

    "PositionWithdrawn(address,uint256,address)": TypedContractEvent<
      PositionWithdrawnEvent.InputTuple,
      PositionWithdrawnEvent.OutputTuple,
      PositionWithdrawnEvent.OutputObject
    >;
    PositionWithdrawn: TypedContractEvent<
      PositionWithdrawnEvent.InputTuple,
      PositionWithdrawnEvent.OutputTuple,
      PositionWithdrawnEvent.OutputObject
    >;

    "ProtocolBatchFeesCollected(uint256,uint256,uint256)": TypedContractEvent<
      ProtocolBatchFeesCollectedEvent.InputTuple,
      ProtocolBatchFeesCollectedEvent.OutputTuple,
      ProtocolBatchFeesCollectedEvent.OutputObject
    >;
    ProtocolBatchFeesCollected: TypedContractEvent<
      ProtocolBatchFeesCollectedEvent.InputTuple,
      ProtocolBatchFeesCollectedEvent.OutputTuple,
      ProtocolBatchFeesCollectedEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
  };
}
