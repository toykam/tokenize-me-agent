/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allTokens"
      | "defaultLockingPeriod"
      | "deployToken"
      | "devAddress"
      | "generateSalt"
      | "getAllTokens"
      | "lpFeesCut"
      | "lpLocker"
      | "owner"
      | "positionManager"
      | "predictTokenAddress"
      | "protocolCut"
      | "renounceOwnership"
      | "swapRouter"
      | "transferOwnership"
      | "uniswapV3Factory"
      | "userToToken"
      | "weth"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Debug"
      | "DebugAddress"
      | "DebugIntValues"
      | "LiquidityAdded"
      | "OwnershipTransferred"
      | "TokenDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLockingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployToken",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateSalt",
    values: [AddressLike, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpFeesCut", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpLocker", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predictTokenAddress",
    values: [AddressLike, string, string, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolCut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userToToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpFeesCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string, value: BigNumberish];
  export type OutputTuple = [message: string, value: bigint];
  export interface OutputObject {
    message: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugAddressEvent {
  export type InputTuple = [name: string, value: AddressLike];
  export type OutputTuple = [name: string, value: string];
  export interface OutputObject {
    name: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugIntValuesEvent {
  export type InputTuple = [name: string, value: BigNumberish];
  export type OutputTuple = [name: string, value: bigint];
  export interface OutputObject {
    name: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    tokenId: BigNumberish,
    amountToken: BigNumberish,
    amountETH: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    tokenId: bigint,
    amountToken: bigint,
    amountETH: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    tokenId: bigint;
    amountToken: bigint;
    amountETH: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDeployedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    owner: AddressLike,
    name: string,
    symbol: string,
    handle: string,
    platform: string,
    profileUrl: string
  ];
  export type OutputTuple = [
    tokenAddress: string,
    owner: string,
    name: string,
    symbol: string,
    handle: string,
    platform: string,
    profileUrl: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    owner: string;
    name: string;
    symbol: string;
    handle: string;
    platform: string;
    profileUrl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  defaultLockingPeriod: TypedContractMethod<[], [bigint], "view">;

  deployToken: TypedContractMethod<
    [
      name: string,
      symbol: string,
      tokenOwner: AddressLike,
      profileAddress: AddressLike,
      handle: string,
      platform: string,
      profileUrl: string,
      _initialTick: BigNumberish,
      _fee: BigNumberish,
      salt: BytesLike
    ],
    [string],
    "payable"
  >;

  devAddress: TypedContractMethod<[], [string], "view">;

  generateSalt: TypedContractMethod<
    [
      deployer: AddressLike,
      name: string,
      symbol: string,
      handle: string,
      platform: string,
      profileUrl: string
    ],
    [[string, string] & { salt: string; tokenAddress: string }],
    "view"
  >;

  getAllTokens: TypedContractMethod<[], [string[]], "view">;

  lpFeesCut: TypedContractMethod<[], [bigint], "view">;

  lpLocker: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  predictTokenAddress: TypedContractMethod<
    [
      deployer: AddressLike,
      name: string,
      symbol: string,
      handle: string,
      platform: string,
      profileUrl: string,
      salt: BytesLike
    ],
    [string],
    "view"
  >;

  protocolCut: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV3Factory: TypedContractMethod<[], [string], "view">;

  userToToken: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "defaultLockingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployToken"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      tokenOwner: AddressLike,
      profileAddress: AddressLike,
      handle: string,
      platform: string,
      profileUrl: string,
      _initialTick: BigNumberish,
      _fee: BigNumberish,
      salt: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "devAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateSalt"
  ): TypedContractMethod<
    [
      deployer: AddressLike,
      name: string,
      symbol: string,
      handle: string,
      platform: string,
      profileUrl: string
    ],
    [[string, string] & { salt: string; tokenAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "lpFeesCut"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpLocker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "predictTokenAddress"
  ): TypedContractMethod<
    [
      deployer: AddressLike,
      name: string,
      symbol: string,
      handle: string,
      platform: string,
      profileUrl: string,
      salt: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolCut"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV3Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userToToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "DebugAddress"
  ): TypedContractEvent<
    DebugAddressEvent.InputTuple,
    DebugAddressEvent.OutputTuple,
    DebugAddressEvent.OutputObject
  >;
  getEvent(
    key: "DebugIntValues"
  ): TypedContractEvent<
    DebugIntValuesEvent.InputTuple,
    DebugIntValuesEvent.OutputTuple,
    DebugIntValuesEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeployed"
  ): TypedContractEvent<
    TokenDeployedEvent.InputTuple,
    TokenDeployedEvent.OutputTuple,
    TokenDeployedEvent.OutputObject
  >;

  filters: {
    "Debug(string,uint256)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "DebugAddress(string,address)": TypedContractEvent<
      DebugAddressEvent.InputTuple,
      DebugAddressEvent.OutputTuple,
      DebugAddressEvent.OutputObject
    >;
    DebugAddress: TypedContractEvent<
      DebugAddressEvent.InputTuple,
      DebugAddressEvent.OutputTuple,
      DebugAddressEvent.OutputObject
    >;

    "DebugIntValues(string,int256)": TypedContractEvent<
      DebugIntValuesEvent.InputTuple,
      DebugIntValuesEvent.OutputTuple,
      DebugIntValuesEvent.OutputObject
    >;
    DebugIntValues: TypedContractEvent<
      DebugIntValuesEvent.InputTuple,
      DebugIntValuesEvent.OutputTuple,
      DebugIntValuesEvent.OutputObject
    >;

    "LiquidityAdded(address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenDeployed(address,address,string,string,string,string,string)": TypedContractEvent<
      TokenDeployedEvent.InputTuple,
      TokenDeployedEvent.OutputTuple,
      TokenDeployedEvent.OutputObject
    >;
    TokenDeployed: TypedContractEvent<
      TokenDeployedEvent.InputTuple,
      TokenDeployedEvent.OutputTuple,
      TokenDeployedEvent.OutputObject
    >;
  };
}
