// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String              @id @default(uuid())
  fid             Int                 @unique
  username        String
  displayName     String?
  pfp     String?
  createdAt       DateTime            @default(now())
  wallet          UserWallet?
  linkedAccounts  LinkedAccount[]     @relation("LinkedAccounts")
  engagements     Engagement[]
  buyAmount       BuyAmount?

  token Token?
}

model UserWallet {
  id           String   @id @default(uuid())
  userId       String   @unique
  address      String   @unique
  encryptedKey String
  iv           String
  authTag      String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
}

model LinkedAccount {
  id        String   @id @default(uuid())
  userId    String
  platform  String   // e.g. "twitter", "lens", "threads"
  username  String
  accountId String   // platform-specific user id
  url String   @default("https://warpcast.com/")

  user      User     @relation("LinkedAccounts", fields: [userId], references: [id])
}

model Token {
  address      String   @id
  name         String
  symbol       String
  decimals     Int
  totalSupply  BigInt
  feeTier  BigInt @default(3000)
  createdAt    DateTime @default(now())

  userId String @unique
  user User @relation(fields: [userId], references: [id])

  upgraded Boolean @default(false)

  transactions TokenTransaction[]

  Engagement Engagement[]
}

model Engagement {
  id           String   @id @default(uuid())
  userId       String
  tokenAddress String
  type         String   // 'like', 'reply', 'recast', etc.
  postId       String
  triggeredAt  DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  token        Token    @relation(fields: [tokenAddress], references: [address])
  transaction  TokenTransaction? @relation(fields: [transactionid], references: [id])
  transactionid String?
}

model TokenTransaction {
  id           String   @id @default(uuid())
  tokenAddress String
  fromAddress  String
  toAddress    String
  amount       Decimal
  txHash       String
  type        TokenTransactionType @default(buy)
  createdAt    DateTime @default(now())

  token        Token    @relation(fields: [tokenAddress], references: [address])

  Engagement Engagement[]
}

model BuyAmount {
    id String   @id @default(uuid())
    userId String @unique
    user User @relation(fields: [userId], references: [id])

    likeAmount Float @default(0)
    retweetAmount Float @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}


enum TokenTransactionType {
  buy
  sell
  transfer
}